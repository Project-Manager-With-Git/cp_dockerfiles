{
    "description": "各种语言不同需求的dockerfile模板",
    "author": "hsz",
    "template_type": "components",
    "template_keys": {
        "cross_compiling": {
            "description": "交叉编译",
            "default": "--platform=$TARGETPLATFORM "
        },
        "app_name": {
            "description": "服务应用名,默认为项目名称",
            "default": "{{ project_name }}"
        }
    },
    "components": {
        "python_allinone_ext_dockerfile": {
            "source": "python/allinone_ext_dockerfile.jinja",
            "description": "python有c扩展依赖且希望将依赖和源码打包到一个文件夹使用这个组件",
            "default_path": "dockerfile"
        },
        "python_pyz_ext_dockerfile": {
            "source": "python/pyz_ext_dockerfile.jinja",
            "description": "python有c扩展依赖但依然希望打包项目源码为pyz使用这个组件",
            "default_path": "dockerfile"
        },
        "python_pyz_allinone_dockerfile": {
            "source": "python/pyz_allinone_dockerfile.jinja",
            "description": "python没有c扩展依赖且希望打包项目源码和所有依赖为一个pyz使用这个组件",
            "default_path": "dockerfile"
        },
        "python_pyz_dockerfile": {
            "source": "python/pyz_dockerfile.jinja",
            "description": "python没有c扩展依赖且希望打包项目源码为一个pyz使用这个组件",
            "default_path": "dockerfile"
        },
        "python_http_ext_dockerfile": {
            "source": "python/http/ext_dockerfile.jinja",
            "description": "python有c扩展的http服务dockerfile,会暴露5000端口并用curl对/ping接口实行健康检查",
            "default_path": "dockerfile"
        },
        "python_grpc_gen_dockerfile": {
            "source": "python/grpc/gen_dockerfile.jinja",
            "description": "python构造grpc时用的dockerflie,会暴露5000端口并用grpc_health_probe对health接口实行健康检查",
            "default_path": "dockerfile"
        },
        "pypy_pyz_dockerfile": {
            "source": "pypy/pyz_dockerfile.jinja",
            "description": "python希望打包项目源码为pyz且使用pypy执行使用这个组件",
            "default_path": "dockerfile"
        },
        "pypy_pyz_allinone_dockerfile": {
            "source": "pypy/pyz_allinone_dockerfile.jinja",
            "description": "python没有c扩展依赖且希望打包项目源码和依赖到一个pyz且使用pypy执行使用这个组件",
            "default_path": "dockerfile"
        },
        "go_ext_dockerfile": {
            "source": "go/ext_dockerfile.jinja",
            "description": "golang有cgo依赖的情况下使用,使用debian:buster-slim作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "go_pure_dockerfile": {
            "source": "go/pure_dockerfile.jinja",
            "description": "golang没有cgo依赖的情况下使用,使用scratch作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "go_ext_alpine_dockerfile": {
            "source": "go/ext_alpine_dockerfile.jinja",
            "description": "golang有cgo依赖但需要alpine的情况下使用,使用alpine作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "go_pure_alpine_dockerfile": {
            "source": "go/pure_alpine_dockerfile.jinja",
            "description": "golang没有cgo依赖但需要alpine的情况下使用,使用alpine作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "go_http_ext_dockerfile": {
            "source": "go/http/ext_dockerfile.jinja",
            "description": "golang有cgo依赖时用的dockerflie,会暴露5000端口并用curl对/ping接口实行健康检查,使用debian:buster-slim作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "go_http_pure_dockerfile": {
            "source": "go/http/pure_dockerfile.jinja",
            "description": "golang没有cgo依赖时用的dockerflie,会暴露5000端口并用curl对/ping接口实行健康检查,使用alpine作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "go_grpc_ext_dockerfile": {
            "source": "go/grpc/ext_dockerfile.jinja",
            "description": "golang有cgo依赖时用的dockerflie,会暴露5000端口并用grpc_health_probe对health接口实行健康检查,使用debian:buster-slim作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "go_grpc_pure_dockerfile": {
            "source": "go/grpc/pure_dockerfile.jinja",
            "description": "golang有cgo依赖时用的dockerflie,会暴露5000端口并用grpc_health_probe对health接口实行健康检查,使用alpine作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "go_grpc_pure_mini_dockerfile": {
            "source": "go/grpc/pure_mini_dockerfile.jinja",
            "description": "golang没有cgo依赖时用的dockerflie,会暴露5000端口并用grpc_health_probe对health接口实行健康检查,使用scratch作为基镜像,且使用upx压缩",
            "default_path": "dockerfile"
        },
        "cxx_grpc_alpine_dockerfile":{
            "source": "cxx/grpc/alpine_dockerfile.jinja",
            "description": "c++纯静态可执行程序的镜像模版,使用alpine作为基镜像",
            "default_path": "dockerfile"
        },
        "cxx_grpc_mini_dockerfile":{
            "source": "cxx/grpc/mini_dockerfile.jinja",
            "description": "c++纯静态可执行程序的镜像模版,使用scratch作为基镜像,且使用upx压缩,注意upx很大可能压缩会报错.",
            "default_path": "dockerfile"
        },
        "cxx_grpc_scratch_dockerfile":{
            "source": "cxx/grpc/scratch_dockerfile.jinja",
            "description": "c++纯静态可执行程序的镜像模版,使用scratch作为基镜像",
            "default_path": "dockerfile"
        }
    }
}