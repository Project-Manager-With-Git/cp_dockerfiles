# 构建可执行文件
FROM {{cross_compiling }}golang:buster as build_bin
ENV GO111MODULE=on
ENV GOPROXY=https://goproxy.io
# 启用cgo
ENV CGO_ENABLED=1
# 安装针对glibc的开发工具链
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories
RUN apk update && apk --no-cache add build-base && rm -rf /var/cache/apk/* 
WORKDIR /code
# 复制依赖列表
COPY go.mod /code/go.mod
COPY go.sum /code/go.sum
# 复制源码
COPY {{ app_name }}.go /code/{{ app_name }}.go
# 编译可执行文件
RUN go build -ldflags "-s -w" -o {{ app_name }}-go {{ app_name }}.go

# 压缩可执行文件
FROM {{ cross_compiling }}alpine:3.11 as upx
WORKDIR /code
# 安装upx
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories
RUN apk update && apk add --no-cache upx && rm -rf /var/cache/apk/*
COPY --from=build_bin /code/{{ app_name }}-go .
RUN upx --best --lzma -o {{ app_name }} {{ app_name }}-go

# 编译获得grpc-health-probe
FROM {{ cross_compiling }}golang:buster as build_grpc-health-probe
ENV GO111MODULE=on
ENV GOPROXY=https://goproxy.io
# 停用cgo
ENV CGO_ENABLED=0
# 安装grpc-health-probe
RUN go get github.com/grpc-ecosystem/grpc-health-probe

# 构造镜像
FROM {{ cross_compiling }}debian:buster-slim as build_img
# 安装curl
RUN sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
RUN apt update -y && apt install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/*
# 部署可执行文件
COPY --from=build_grpc-health-probe /go/bin/grpc-health-probe .
RUN chmod +x /grpc-health-probe
COPY --from=upx /code/{{ app_name }} .
RUN chmod +x /{{ app_name }}
EXPOSE 5000
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD [ "/grpc-health-probe","-addr=:5000" ]
ENTRYPOINT [ "/{{ app_name }}"]